import logging
from random import randint

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from tg_bot.keyboards.inline.games import games_keyboard, choice_game_callback, game_keyboard, accept_game_callback
from tg_bot.keyboards.inline.lotterytickets import action_ticket_callback
from tg_bot.keyboards.inline.lotterytickets import generate_lottery_tickets_keyboard, lottery_ticket_callback, \
    buy_ticket_keyboard
from tg_bot.keyboards.inline.tower_game import tower_game_keyboard, tower_game_callback, tower_game_end_callback
from tg_bot.keyboards.reply.back_to_gold_menu import back_to_gold_keyboard
from tg_bot.keyboards.reply.gold_menu import gold_menu_keyboard
from tg_bot.models.history import GoldHistory
from tg_bot.models.lottery import LotteryTickets, TicketGames
from tg_bot.models.users import User
from tg_bot.services.tower_game import tower_game_session, calculate_tower_win
from tg_bot.states.tower_game_state import TowerState


async def get_games(message: types.Message):
    await message.answer('–ò–≥—Ä—ã üé≤:', reply_markup=games_keyboard)


async def get_game(call: types.CallbackQuery, callback_data: dict):
    game = callback_data.get("choice")
    text = ''
    if game == 'tower':
        text = "–ë–∞—à–Ω—è - —ç—Ç–æ –∏–≥—Ä–∞, –≥–¥–µ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –∑–æ–ª–æ—Ç–µ –∏ —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—à–Ω–∏, –ø–æ–¥–Ω–∏–º–∞—è—Å—å –≤—Å–µ –≤—ã—à–µ. " \
               "–ß–µ–º –≤—ã—à–µ –≤—ã –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞. " \
               "–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. " \
               "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ 3X."
    elif game == 'jackpot':
        text = "–†–µ–∂–∏–º JackPot - –≠—Ç–æ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ–∂–∏–º. " \
               "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–Ω–æ—Å—è—Ç –ª—é–±—É—é —Å—Ç–∞–≤–∫—É –∑–æ–ª–æ—Ç–æ–º –∏ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –±–∞–Ω–∫. " \
               "–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –µ–≥–æ —Å—Ç–∞–≤–∫–∏. " \
               "–ß–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å. " \
               "–ù–æ –∏ —Å –º–∞–ª–µ–Ω—å–∫–∏–º —à–∞–Ω—Å–æ–º –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –≤–µ—Å—å –±–∞–Ω–∫! –ú—ã –±–µ—Ä—ë–º 10% –∑–∞ –≤—ã–∏–≥—Ä—ã—à."
    elif game == 'lottery':
        text = "–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ª–æ—Ç–µ—Ä–µ—é, –ø–æ–∫—É–ø–∞–π—Ç–µ –±–∏–ª–µ—Ç—ã —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å 10 000 –∑–æ–ª–æ—Ç–∞! " \
               "–ï—Å—Ç—å 3 –≤–∏–¥–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞ –∏ –µ–≥–æ –∫—É—à–∞, –æ—Ç —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∫ –±–æ–ª—å—à–æ–º—É. " \
               "–í—ã–∏–≥—Ä—ã—à –≤ –±–∏–ª–µ—Ç–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —É–¥–∞—á–∏."

    await call.message.edit_text(text, reply_markup=game_keyboard(game))


async def tower(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –°—Ç–∞–≤–∫–∞ 10G\n'
                              '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=back_to_gold_keyboard)
    await TowerState.first()


async def tower_bet(message: types.Message, state: FSMContext):
    session_maker = message.bot['db']
    async with state.proxy() as data:
        try:
            data['current_bet'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')

        if data['current_bet'] >= 10:
            await message.answer(f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {data["current_bet"]}\n'
                                 f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                 reply_markup=tower_game_keyboard(current_bet=data['current_bet']))
            await User.take_currency(session_maker=session_maker, telegram_id=message.from_user.id,
                                     currency_type='gold', value=data["current_bet"])
        else:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10G')


async def tower_game(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    current_step = int(callback_data.get('current_step'))
    config = call.bot['config']
    async with state.proxy() as data:
        if current_step + 1 != 5:
            if await tower_game_session(config):
                win = await calculate_tower_win(int(data['current_bet']), current_step + 1)
                await call.message.edit_text(
                    f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –∑–æ–ª–æ—Ç–∞.\n'
                    '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äò–õ–µ–≤–æ‚Äô –∏–ª–∏ ‚Äò–ü—Ä–∞–≤–æ‚Äô. '
                    '–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äò–∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à‚Äô.',
                    reply_markup=tower_game_keyboard(current_bet=win,
                                                     current_step=current_step + 1))
            else:
                await state.finish()
                await call.message.delete()
                await call.message.answer('–£–ø—Å, –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ ‚òπÔ∏è', reply_markup=gold_menu_keyboard)
        else:
            win = await calculate_tower_win(int(data['current_bet']), current_step + 1)
            await call.message.delete()
            await call.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –∑–æ–ª–æ—Ç–∞.', reply_markup=gold_menu_keyboard)
            await state.finish()


async def tower_game_end(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    session_maker = call.bot['db']
    win = int(callback_data.get('current_bet'))
    await call.message.delete()
    await call.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –∑–æ–ª–æ—Ç–∞.', reply_markup=gold_menu_keyboard)
    await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                            currency_type='gold', value=win)
    await GoldHistory.add_gold_purchase(session_maker=session_maker, telegram_id=call.from_user.id, gold=win)
    await state.finish()


async def jackpot(call: types.CallbackQuery):
    await call.answer('jackpot')


async def lottery(call: types.CallbackQuery):
    session_maker = call.bot['db']
    lottery_tickets: list = await LotteryTickets.get_all_lottery_tickets(session_maker)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:',
                                 reply_markup=generate_lottery_tickets_keyboard(lottery_tickets))


async def lottery_ticket(call: types.CallbackQuery, callback_data: dict):
    session_maker = call.bot['db']
    id = callback_data.get('id')
    price = callback_data.get('price')
    name = callback_data.get('name')
    ticket: str = await LotteryTickets.get_ticket(id=int(id), session_maker=session_maker)
    ticket_max_win = str(ticket).split(':')[-2]
    ticket_min_win = str(ticket).split(':')[-1]
    text = f'{name} - –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–æ {ticket_max_win} –∑–æ–ª–æ—Ç–∞. ' \
           f'–°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç {ticket_min_win} –¥–æ {ticket_max_win}. ' \
           f'–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ {price} –∑–æ–ª–æ—Ç–∞.'
    await call.message.edit_text(text, reply_markup=buy_ticket_keyboard(ticket_id=id, price=price))


async def lottery_ticket_buy(call: types.CallbackQuery, callback_data: dict):
    session_maker = call.bot['db']
    user_gold = await User.get_gold(session_maker=session_maker, telegram_id=call.from_user.id)
    price = int(callback_data.get('price'))
    ticket_id = int(callback_data.get('id'))

    if int(user_gold) >= price:
        await User.take_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                 currency_type='gold', value=price)
        count_games = await TicketGames.get_count_games(user_id=call.from_user.id,
                                                        ticket_id=ticket_id,
                                                        session_maker=session_maker)
        if count_games % 3 == 0:
            win = int((price / 100 * randint(20, 45)) + price)
        elif count_games % 10 == 0:
            win = int((price / 100 * randint(50, 100)) + price)
        else:
            win = randint(0, price - 1)

        await TicketGames.add_game(user_id=call.from_user.id, ticket_id=ticket_id,
                                   bet=price, win=win, session_maker=session_maker)
        await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                currency_type='gold', value=win)

        await call.message.edit_text(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win}G')
        logging.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {call.from_user.id} –≤—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ–µ {win}G')
    else:
        await call.message.edit_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


async def lottery_ticket_back(call: types.CallbackQuery):
    session_maker = call.bot['db']
    lottery_tickets: list = await LotteryTickets.get_all_lottery_tickets(session_maker)
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:',
                                 reply_markup=generate_lottery_tickets_keyboard(lottery_tickets))


def register_games(dp: Dispatcher):
    dp.register_message_handler(get_games, text='–ò–≥—Ä—ã üé≤')
    dp.register_callback_query_handler(get_game, choice_game_callback.filter())
    dp.register_callback_query_handler(tower, accept_game_callback.filter(game_name='tower'))
    dp.register_message_handler(tower_bet, state=TowerState.current_bet)
    dp.register_callback_query_handler(tower_game, tower_game_callback.filter(), state=TowerState.current_bet)
    dp.register_callback_query_handler(tower_game_end, tower_game_end_callback.filter(), state=TowerState.current_bet)
    dp.register_callback_query_handler(jackpot, accept_game_callback.filter(game_name='jackpot'))
    dp.register_callback_query_handler(lottery, accept_game_callback.filter(game_name='lottery'))
    dp.register_callback_query_handler(lottery_ticket, lottery_ticket_callback.filter())
    dp.register_callback_query_handler(lottery_ticket_back, action_ticket_callback.filter(action='back'))
    dp.register_callback_query_handler(lottery_ticket_buy, action_ticket_callback.filter(action='buy'))
