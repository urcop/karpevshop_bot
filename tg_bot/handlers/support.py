from aiogram import types, Dispatcher

from tg_bot.keyboards.inline import support


def support_text():
    text = [
        '1. –ü–æ—á–µ–º—É —è –ø–æ–ø–æ–ª–Ω—è—é –≤ –≥—Ä–∏–≤–Ω–∞—Ö, –∞ –º–Ω–µ –ø—Ä–∏—à–ª–æ –º–µ–Ω—å—à–µ —Ä—É–±–ª–µ–π, —á–µ–º –ø–∏—à–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?',
        '2. –°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?',
        '3. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —á–µ–∫?',
        '4. –ü–æ—á–µ–º—É –º–Ω–µ –Ω–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?',
        '5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É –≤–∞—Å –ø–æ–∫—É–ø–∞—Ç—å?',
        '6. –ú–æ–∂–Ω–æ –ª–∏ –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ/–∫–ª–∞–Ω—ã/–∞–∫–∫–∞—É–Ω—Ç/—Å–∫–∏–Ω—ã?',
        '7. –ü–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –≤—ã–≤–æ–¥—è—Ç –∑–æ–ª–æ—Ç–æ?',
        '\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∞—Ç—å—Å—è'
    ]
    return '\n'.join(text)


async def support_questions(message: types.Message):
    await message.answer(support_text(), reply_markup=support.keyboard)


async def support_question(call: types.CallbackQuery, callback_data: dict):
    answers = {
        1: '–ú—ã –Ω–µ —è–≤–ª—è–µ–º—Å—è –±–∏—Ä–∂–µ–π –≤–∞–ª—é—Ç, –≤—ã —É –Ω–∞—Å –ø–æ–∫—É–ø–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ, –∞ –Ω–µ —Ä—É–±–ª–∏. –¢–æ –µ—Å—Ç—å, –º—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤–∞—à–∏ –≥—Ä–∏–≤–Ω—ã –≤ –∑–æ–ª–æ—Ç–æ. –ü–æ—Å–ª–µ, –∑–æ–ª–æ—Ç–æ –≤ —Ä—É–±–ª–∏.',
        2: '–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ 24 —á–∞—Å–æ–≤ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ù–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ —á–∞—Å–∞.',
        3: '–ß–µ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ä—É—á–Ω—É—é, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º, —Ç–æ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.',
        4: "–ï—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ —á–µ—Ä–µ–∑ QIWI, —Ç–æ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–¥–µ –≤–∞–º –≤—ã–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –Ω–∞–∂–º–∏—Ç–µ –µ—ë. –ù–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ç–æ –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∏–Ω—É–ª–∏ –±–æ—Ç—É —á–µ–∫ —Ñ–∞–π–ª–æ–º. –í –ø–æ–¥–æ–±–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ: ' –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å '; —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É; ' –î—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º '; ' –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ '. –ü–æ—Å–ª–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
        5: '–í–µ—Å—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç—Å—è –≤ –±–æ—Ç–µ, –ø–æ–ª—É—á–µ–Ω —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç—ë–º. –ï—Å–ª–∏ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å –≤ –∏–≥—Ä–µ.',
        6: '–ú—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫, –Ω–µ –∑–Ω–∞–µ–º, –æ—Ç–∫—É–¥–∞ –æ–Ω–∏ –∏—Ö –¥–æ—Å—Ç–∞–ª–∏, –∞ –µ—Å–ª–∏ –∑–Ω–∞–µ–º, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ –¥–ª—è –Ω–∞—Å, –∏ –º—ã –ø—Ä–æ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã –Ω–∞ 100%',
        7: '–í—ã–≤–æ–¥ –∑–æ–ª–æ—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤. –ù–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–º –∑–æ–ª–æ—Ç–æ. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤, –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å, –∏ –ø–æ–∫–∞ –æ–Ω–∞ –¥–æ–π–¥—ë—Ç –¥–æ –≤–∞—Å, –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª —á–∞—Å–∞ –∫–∞–∫ –Ω–∞ 1 –º–µ—Å—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä—ã–Ω–∫–æ–º ( —Å–ª–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–∫–∏–Ω) –∏–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤.',
    }
    question_id = int(callback_data.get('question_id'))
    await call.message.edit_text(text=answers[question_id], reply_markup=support.answer_menu_keyboard)


async def answer_action(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.get('action')
    if action == 'contact':
        ...
    elif action == 'back':
        await call.message.edit_text(support_text(), reply_markup=support.keyboard)


def register_support(dp: Dispatcher):
    dp.register_message_handler(support_questions, text="–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë§")
    dp.register_callback_query_handler(support_question, support.support_callback.filter())
    dp.register_callback_query_handler(answer_action, support.support_menu_callback.filter())
