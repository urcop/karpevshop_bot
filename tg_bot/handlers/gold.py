import datetime
import logging
from random import randint

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

from tg_bot.keyboards.inline.access_buy_gold import access_keyboard
from tg_bot.keyboards.inline.output_items import types_keyboard, category_keyboard, quality_keyboard, \
    item_type_callback, item_category_callback, item_quality_callback, generate_output_keyboard, item_callback
from tg_bot.keyboards.reply import main_menu
from tg_bot.keyboards.reply.back_to_gold_menu import back_to_gold_keyboard
from tg_bot.keyboards.reply.gold_menu import gold_menu_keyboard
from tg_bot.misc.place_in_queue import place_in_queue
from tg_bot.misc.prefixes import get_prefix_type, prefixes, get_prefix_type_reverse
from tg_bot.models.history import GoldHistory
from tg_bot.models.items import Item, OutputQueue
from tg_bot.models.seasons import Season, Season2User
from tg_bot.models.users import User
from tg_bot.states.gold_output import GoldOutput


async def gold_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=gold_menu_keyboard)


async def back_to_gold_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=gold_menu_keyboard)


async def back_button(message: types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', reply_markup=main_menu.keyboard)


async def gold_calculate(message: types.Message, state: FSMContext):
    await message.answer('ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞', reply_markup=back_to_gold_keyboard)
    await state.set_state('calculate_gold')


async def get_gold_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        config = message.bot['config']
        try:
            data['count_gold'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        if data['count_gold'] >= config.misc.min_payment_value:
            price = round(data['count_gold'] * config.misc.gold_rate)
            await message.answer(f'–¶–µ–Ω–∞ –∑–∞ {data["count_gold"]} –∑–æ–ª–æ—Ç–∞, {price} —Ä—É–±.',
                                 reply_markup=back_to_gold_keyboard)
        else:
            await message.answer(f'–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º {config.misc.min_payment_value + 1} –∑–æ–ª–æ—Ç–∞')
            return


async def gold_exchange(message: types.Message, state: FSMContext):
    await message.answer('ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=back_to_gold_keyboard)
    await state.set_state('get_count_gold_exchange')


async def get_count_gold_exchange(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        config = message.bot['config']
        session_maker = message.bot['db']
        try:
            data['count_gold'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        if data['count_gold'] >= config.misc.min_payment_value:
            price = round(data['count_gold'] * config.misc.gold_rate)
            if await User.is_enough(session_maker=session_maker, telegram_id=message.from_user.id,
                                    currency_type='balance', count=price):
                await message.answer(f'–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {price} —Ä—É–±. –∑–∞ {message.text} –∑–æ–ª–æ—Ç–∞.',
                                     reply_markup=access_keyboard)

            else:
                await message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ {data["count_gold"]} –∑–æ–ª–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} —Ä—É–±.\n'
                                     '–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.')
                return
            return
        else:
            await message.answer(f'–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º {config.misc.min_payment_value + 1} –∑–æ–ª–æ—Ç–∞')
            return


async def access_buy(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        session_maker = call.bot['db']
        config = call.bot['config']
        price = round(data['count_gold'] * config.misc.gold_rate)
        await User.take_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                 currency_type='balance', value=price)
        await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                currency_type='gold', value=data['count_gold'])
        await GoldHistory.add_gold_purchase(session_maker=session_maker, telegram_id=call.from_user.id,
                                            gold=data['count_gold'])
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {call.from_user.id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {data["count_gold"]}G')

        now = datetime.datetime.now().timestamp()
        current_season_id = await Season.get_current_season(session_maker, now)
        times = await Season.get_season_time(session_maker, current_season_id)

        gold_in_season = await GoldHistory.get_gold_user_period(session_maker, start_time=int(times[0]),
                                                                end_time=int(times[1]), user_id=call.from_user.id)
        prefix_type = await get_prefix_type(gold_in_season)
        current_prefix = await prefixes(prefix_type)
        prefix_in_db = await Season2User.get_user_prefix(session_maker=session_maker, telegram_id=call.from_user.id,
                                                         season_id=current_season_id)

        if current_prefix[1] != prefix_in_db:
            await Season2User.update_prefix(session_maker=session_maker, telegram_id=call.from_user.id,
                                            season_id=current_season_id, prefix=current_prefix[1])
            await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                    currency_type='gold', value=current_prefix[0])
            await call.message.answer(
                f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –≤ –≤–∏–¥–µ {current_prefix[0]} –∑–æ–ª–æ—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞. '
                f'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã.')

            current_prefix_reverse = await get_prefix_type_reverse(prefix_in_db)
            if prefix_type - current_prefix_reverse > 1:
                for row in range(current_prefix_reverse, prefix_type):
                    reward = await prefixes(row)

                    await GoldHistory.add_gold_purchase(session_maker=session_maker, telegram_id=call.from_user.id,
                                                        gold=reward[0])
                    await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                            currency_type='gold', value=reward[0])
        await call.message.delete()
        await call.message.answer('–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!', reply_markup=gold_menu_keyboard)
        await state.finish()


async def output(message: types.Message):
    await message.answer('ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞', reply_markup=back_to_gold_keyboard)
    await GoldOutput.first()


async def count_gold_output(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['count'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')

    session_maker = message.bot['db']
    if data['count'] >= 50:
        user_gold = await User.get_gold(session_maker=session_maker, telegram_id=message.from_user.id)
        if user_gold >= data['count']:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞:', reply_markup=types_keyboard)
            await GoldOutput.next()
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
    else:
        await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 50 –∑–æ–ª–æ—Ç–∞')


async def choosing_an_item_type(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        try:
            if data['category'] == 'back':
                data.pop('category')
            if data['quality'] == 'back':
                data.pop('quality')
        except KeyError:
            pass

        data['type'] = int(callback_data.get('type'))
        if data['type'] == 1:
            await GoldOutput.category.set()
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ä—É–∂–∏—è', reply_markup=category_keyboard)
        else:
            if data['type'] in (2, 3):
                text = {
                    2: '–Ω–∞–∫–ª–µ–π–∫–∏',
                    3: '–±—Ä–µ–ª–æ–∫–∞'
                }
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ {text[data["type"]]}',
                                             reply_markup=quality_keyboard)
                await GoldOutput.quality.set()


async def choosing_an_item_category(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        data['category'] = callback_data.get('category')
        if data['category'] == 'back':
            await GoldOutput.type.set()
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞', reply_markup=types_keyboard)
        else:
            if data['type'] == 1:
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è',
                                             reply_markup=quality_keyboard)
                await GoldOutput.quality.set()


async def choosing_an_item_quality(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        try:
            if data['category'] == 'back':
                data['category'] = 0
        except KeyError:
            data['category'] = 0

        data['quality'] = callback_data.get('quality')
        if data['quality'] == 'back' and data['category'] == 0:
            await GoldOutput.type.set()
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞', reply_markup=types_keyboard)
        elif data['quality'] == 'back' and data['type'] == 1:
            await GoldOutput.category.set()
            await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ä—É–∂–∏—è', reply_markup=category_keyboard)
        elif data['quality'] != 'back':
            session_maker = call.bot['db']
            await GoldOutput.item_name.set()
            items = [item[0] for item in
                     await Item.find_all_items(type=int(data['type']), category=int(data['category']),
                                               quality=int(data['quality']),
                                               session_maker=session_maker)]
            if len(items) > 0:
                await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞',
                                             reply_markup=await generate_output_keyboard(items))
            else:
                await call.message.delete()
                await call.message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=gold_menu_keyboard)
                await state.finish()


async def choosing_an_item_name(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        data['item_name'] = callback_data.get('name')
        if data['item_name'] == 'back':
            await GoldOutput.quality.set()
            if data['type'] == 1:
                await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è',
                                             reply_markup=quality_keyboard)
            elif data['type'] in (2, 3):
                text = {
                    2: '–Ω–∞–∫–ª–µ–π–∫–∏',
                    3: '–±—Ä–µ–ª–æ–∫–∞'
                }
                await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ {text[data["type"]]}',
                                             reply_markup=quality_keyboard)
        else:
            data['price'] = int(int(data['count']) / 0.8) + randint(10, 99) / 100
            text = f"""üåü–û—Ç–ª–∏—á–Ω–æ!

–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ Standoff 2 –∏ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –≥–¥–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω {data['item_name']} –Ω–∞ —Ä—ã–Ω–∫–µ –∑–∞ {data['price']} G.

‚ùóÔ∏è–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –Ω–∞ —Ä—ã–Ω–∫–µ: <b>'–¢–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã'</b>!

–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥. –ü—Ä–∏–º–µ—Ä —Å–≤–µ—Ä—Ö—É ‚¨ÜÔ∏è
            """
            example_photo_path = call.bot['config'].misc.base_dir / 'uploads'
            example_photo = InputFile(example_photo_path / 'example.jpg')
            await call.message.delete()
            await call.message.answer_photo(caption=text, photo=example_photo)
            await GoldOutput.photo.set()


async def get_photo_output(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        session_maker = message.bot['db']
        item_id = await Item.get_item_id_by_name(item_name=data['item_name'], session_maker=session_maker)
        config = message.bot['config']
        file_name = f'{message.from_user.id}_{randint(1000, 9999)}.jpg'
        await message.photo[-1].download(destination_file=config.misc.base_dir / 'uploads' / 'outputs' / file_name)
        user_nickname = message.from_user.username if message.from_user.username else message.from_user.full_name
        await User.take_currency(session_maker=session_maker, telegram_id=message.from_user.id,
                                 currency_type='gold', value=data['count'])
        await OutputQueue.add_to_queue(user_id=message.from_user.id, item_id=item_id, photo=file_name,
                                       user_nickname=user_nickname,
                                       gold=data['count'], session_maker=session_maker)
        admins_and_workers = await User.get_admins(session_maker) + await User.get_workers(session_maker)
        admins_and_workers = [user[0] for user in admins_and_workers]
        list(set(admins_and_workers))

        for user in admins_and_workers:
            await message.bot.send_message(chat_id=user,
                                           text=f'‚ùóÔ∏è–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '
                                                f'{message.from_user.get_mention(f"@{user_nickname}")}')
        users = await OutputQueue.get_all_queue(session_maker)
        place = await place_in_queue(users, message.from_user.id)
        await message.answer('üí´–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ.\n\n'
                             f'–í—ã {place[-1][0] + 1} –≤ –æ—á–µ—Ä–µ–¥–∏', reply_markup=gold_menu_keyboard)
        await state.finish()


async def output_queue(message: types.Message):
    session_maker = message.bot['db']
    users = await OutputQueue.get_all_queue(session_maker)
    place = await place_in_queue(users, message.from_user.id)
    text = ['–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å']

    for p in place:
        text.append(f'{p[1]}G - ‚Ññ{p[0] + 1}')
    if len(text) > 1:
        await message.answer('\n'.join(text))
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥!')


async def rewards(message: types.Message):
    session_maker = message.bot['db']
    now = datetime.datetime.now().timestamp()
    text = []
    current_season_id = await Season.get_current_season(session_maker, now)
    times = await Season.get_season_time(session_maker, current_season_id)

    current_prefix = await Season2User.get_user_prefix(session_maker=session_maker,
                                                       telegram_id=message.from_user.id,
                                                       season_id=current_season_id)
    current_prefix_type = await get_prefix_type_reverse(current_prefix)
    prev_prefix = await Season2User.get_user_prefix(session_maker=session_maker,
                                                    telegram_id=message.from_user.id,
                                                    season_id=current_season_id - 1)
    if current_season_id > 1:
        text.append(f'üìÇ {current_season_id - 1} –°–µ–∑–æ–Ω: {prev_prefix}')

    text.append(f'üìÇ {current_season_id} –°–µ–∑–æ–Ω: {current_prefix}')
    try:
        next_reward = await prefixes(current_prefix_type + 1)
        text.append(f'üéÅ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ - {next_reward[0]}G')
    except KeyError:
        text.append(
            f'üéÅ –í—ã –±–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —ç—Ç–∏–º —Ç—Ä—É–¥–Ω—ã–º –ø—É—Ç—ë–º, –Ω–æ —ç—Ç–æ –ª–∏—à—å –Ω–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –±–æ–ª–µ–µ –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ. '
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–¥—Ç–∏ –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏, –Ω–æ –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ.'
        )
    next_season = datetime.datetime.fromtimestamp(times[1]) - datetime.datetime.fromtimestamp(now)
    text.append(
        f'\nüïõ –°–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω —á–µ—Ä–µ–∑ {next_season.days} –¥–Ω–µ–π {next_season.seconds // 3600} —á–∞—Å–æ–≤ '
        f'{next_season.seconds % 3600 // 60} –º–∏–Ω—É—Ç'
    )
    await message.answer('\n'.join(text))


def register_gold(dp: Dispatcher):
    dp.register_message_handler(gold_menu, text='–ó–æ–ª–æ—Ç–æ ü•á')
    dp.register_message_handler(back_button, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    dp.register_message_handler(back_to_gold_menu, text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', state='*')
    dp.register_message_handler(gold_calculate, text='–ü–æ—Å—á–∏—Ç–∞—Ç—å ü•á')
    dp.register_message_handler(get_gold_count, state='calculate_gold')
    dp.register_message_handler(gold_exchange, text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å ü•á')
    dp.register_message_handler(get_count_gold_exchange, state='get_count_gold_exchange')
    dp.register_callback_query_handler(access_buy, state='get_count_gold_exchange', text='access_buy_gold')

    dp.register_message_handler(output, text='–í—ã–≤–µ—Å—Ç–∏ ü•á')
    dp.register_message_handler(count_gold_output, state=GoldOutput.count)
    dp.register_callback_query_handler(choosing_an_item_type, item_type_callback.filter(),
                                       state=GoldOutput.type)
    dp.register_callback_query_handler(choosing_an_item_category, item_category_callback.filter(),
                                       state=GoldOutput.category)
    dp.register_callback_query_handler(choosing_an_item_quality, item_quality_callback.filter(),
                                       state=GoldOutput.quality)
    dp.register_callback_query_handler(choosing_an_item_name, item_callback.filter(),
                                       state=GoldOutput.item_name)
    dp.register_message_handler(get_photo_output, state=GoldOutput.photo, content_types=['photo', 'document'])

    dp.register_message_handler(output_queue, text='–û—á–µ—Ä–µ–¥—å üë•')
    dp.register_message_handler(rewards, text='–ù–∞–≥—Ä–∞–¥—ã üéÅ')
