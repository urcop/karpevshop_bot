import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from tg_bot.keyboards.inline.access_buy_gold import access_keyboard
from tg_bot.keyboards.reply import main_menu
from tg_bot.keyboards.reply.back_to_gold_menu import back_to_gold_keyboard
from tg_bot.keyboards.reply.gold_menu import gold_menu_keyboard
from tg_bot.models.history import GoldHistory
from tg_bot.models.users import User


async def gold_menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=gold_menu_keyboard)


async def back_to_gold_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é', reply_markup=gold_menu_keyboard)


async def back_button(message: types.Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è', reply_markup=main_menu.keyboard)


async def gold_calculate(message: types.Message, state: FSMContext):
    await state.set_state('calculate_gold')
    await message.answer('ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞', reply_markup=back_to_gold_keyboard)


async def gold_exchange(message: types.Message, state: FSMContext):
    await message.answer('ü•á –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=back_to_gold_keyboard)
    await state.set_state('get_count_gold_exchange')


async def get_gold_count(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        config = message.bot['config']
        try:
            data['count_gold'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        if data['count_gold'] >= config.misc.min_payment_value:
            price = int(data['count_gold'] * config.misc.gold_rate)
            await message.answer(f'–¶–µ–Ω–∞ –∑–∞ {data["count_gold"]} –∑–æ–ª–æ—Ç–∞, {price} —Ä—É–±.', reply_markup=gold_menu_keyboard)
            await state.finish()
        else:
            await message.answer(f'–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º {config.misc.min_payment_value + 1} –∑–æ–ª–æ—Ç–∞')
            return


async def get_count_gold_exchange(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        config = message.bot['config']
        session_maker = message.bot['db']
        try:
            data['count_gold'] = int(message.text)
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        if data['count_gold'] >= config.misc.min_payment_value:
            price = int(data['count_gold'] * config.misc.gold_rate)
            if await User.is_enough(session_maker=session_maker, telegram_id=message.from_user.id,
                                    currency_type='balance', count=data['count_gold']):
                await message.answer(f'–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {price} —Ä—É–±. –∑–∞ {message.text} –∑–æ–ª–æ—Ç–∞.',
                                     reply_markup=access_keyboard)

            else:
                await message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ {data["count_gold"]} –∑–æ–ª–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} —Ä—É–±.\n'
                                     '–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.')
                return
            return
        else:
            await message.answer(f'–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∏–Ω–∏–º—É–º {config.misc.min_payment_value + 1} –∑–æ–ª–æ—Ç–∞')
            return


async def access_buy(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        session_maker = call.bot['db']
        config = call.bot['config']
        price = int(data['count_gold'] * config.misc.gold_rate)
        await User.take_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                 currency_type='balance', value=price)
        await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                currency_type='gold', value=data['count_gold'])
        await GoldHistory.add_gold_purchase(session_maker=session_maker, telegram_id=call.from_user.id,
                                            gold=price)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {call.from_user.id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {data["count_gold"]}G')
        await call.message.delete()
        await call.message.answer('–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!', reply_markup=gold_menu_keyboard)
        await state.finish()


def register_gold(dp: Dispatcher):
    dp.register_message_handler(gold_menu, text='–ó–æ–ª–æ—Ç–æ ü•á')
    dp.register_message_handler(back_button, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨ÖÔ∏è')
    dp.register_message_handler(back_to_gold_menu, text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', state='*')
    dp.register_message_handler(gold_calculate, text='–ü–æ—Å—á–∏—Ç–∞—Ç—å ü•á')
    dp.register_message_handler(gold_exchange, text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å ü•á')
    dp.register_message_handler(get_gold_count, state='calculate_gold')
    dp.register_message_handler(get_count_gold_exchange, state='get_count_gold_exchange')
    dp.register_callback_query_handler(access_buy, state='get_count_gold_exchange', text='access_buy_gold')
