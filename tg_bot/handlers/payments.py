import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from tg_bot.keyboards.inline import payment
from tg_bot.keyboards.reply import main_menu, back_to_main
from tg_bot.models.history import BalanceHistory
from tg_bot.models.users import User
from tg_bot.services.payment import Payment, NoPaymentFound, NotEnoughMoney
from tg_bot.states.payment_state import PaymentState


async def get_payment(message: types.Message):
    await message.answer('üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö', reply_markup=back_to_main.keyboard)
    await PaymentState.amount.set()


async def get_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['amount'] = int(message.text)
            min_payment = message.bot['config'].qiwi.min_payment_qiwi
            if data['amount'] >= min_payment:
                await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {data["amount"]} —Ä—É–±.\n'
                                     f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', reply_markup=payment.choice_keyboard)
            else:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10 —Ä—É–±–ª–µ–π')
        except ValueError:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


async def get_payment_system(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    async with state.proxy() as data:
        config = call.bot['config']
        payment_amount = data['amount']
        payment_system = callback_data.get('choice')
        if payment_system == 'QIWI':
            url = Payment(amount=payment_amount)
            url.create()
            await call.message.delete()
            await call.message.answer('–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b> –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',
                                      reply_markup=main_menu.keyboard)
            await call.message.answer(
                text=f'–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å  {payment_amount} —Ä—É–± –Ω–∞ –Ω–∞—à —Å—á–µ—Ç Qiwi\n'
                     f'–°—Å—ã–ª–∫–∞: <a href="{url.invoice}">{url.invoice[:40]}...</a>\n'
                     f'–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \n<code>{url.id}</code>',
                reply_markup=payment.generate_qiwi_keyboard(url.invoice)
            )
            await state.finish()
            await state.set_state('qiwi')
            await state.update_data(payment=url)

        elif payment_system == 'another':
            text = [
                '–£–∫—Ä–∞–∏–Ω–∞:',
                f'MonoBank: <code>{config.misc.ua_card}</code>\n',
                '–†–æ—Å—Å–∏—è:',
                f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–∏–≤–∏: <code>{config.misc.phone}</code>',
                f'QIWI: <code>{config.misc.phone}</code>',
                f'–¢–∏–Ω—å–∫–æ—Ñ—Ñ: <code>{config.misc.ru_card}</code>'
            ]
            await call.message.answer('\n'.join(text))
            await call.message.answer(
                text='–ì–õ–ê–í–ù–û–ï –ò–ú–ï–¢–¨ –ß–ï–ö, –ß–¢–û–ë–´ –ú–´ –ú–û–ì–õ–ò –£–ë–ï–î–ò–¢–¨–°–Ø –ß–¢–û –≠–¢–û –í–´ –û–¢–ü–†–ê–í–ò–õ–ò –ù–ê–ú –î–ï–ù–¨–ì–ò.',
                reply_markup=payment.check
            )
            await state.finish()


async def payment_success(call: types.CallbackQuery, state: FSMContext):
    session_maker = call.bot.get('db')
    await call.answer(cache_time=5)
    data = await state.get_data()
    payment: Payment = data.get('payment')
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return
    except NotEnoughMoney:
        await call.message.answer('–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π')
        return
    else:
        await call.message.delete()
        await User.add_currency(session_maker=session_maker, telegram_id=call.from_user.id,
                                currency_type='balance', value=int(payment.amount))

        text = [
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.id}',
            f'–ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {payment.amount} —Ä—É–±'
        ]
        logging.info(' '.join(text))
        for admin in await User.get_admins(session_maker=session_maker):
            await call.bot.send_message(chat_id=int(admin[0]), text='\n'.join(text))

        await call.message.answer('–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ', reply_markup=main_menu.keyboard)
        await BalanceHistory.add_balance_purchase(session_maker=session_maker,
                                                  telegram_id=call.from_user.id,
                                                  money=payment.amount)
    await state.finish()


async def payment_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await state.finish()


async def payment_check(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
    except Exception:
        pass
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
    await state.set_state('payment_check')


async def get_payment_check(message: types.Message, state: FSMContext):
    if message.content_type in ['photo', 'document']:
        session_maker = message.bot.get('db')
        text = [
            '–ü–æ–ª—É—á–µ–Ω —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ',
            f'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>'
        ]
        for admin in await User.get_admins(session_maker=session_maker):
            await message.copy_to(chat_id=int(admin[0]), caption='\n'.join(text))

        await message.answer(
            '–°–ø–∞—Å–∏–±–æ, –æ–∂–∏–¥–∞–π—Ç–µ! –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.',
            reply_markup=main_menu.keyboard)
        await state.finish()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ')


def register_payments(dp: Dispatcher):
    dp.register_message_handler(get_payment, text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≥")
    dp.register_message_handler(get_amount, state=PaymentState.amount)
    dp.register_callback_query_handler(get_payment_system,
                                       payment.payment_choice_callback.filter(),
                                       state=PaymentState.amount)
    dp.register_callback_query_handler(payment_success, text='payment_qiwi_success', state='qiwi')
    dp.register_callback_query_handler(payment_cancel, text='payment_qiwi_cancel', state='*')
    dp.register_callback_query_handler(payment_check, text='payment_check', state='*')
    dp.register_message_handler(get_payment_check, state='payment_check', content_types=['any'])
